doctype html
html(lang="pt-BR")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Editar Serviço - EMATER
    link(rel="preconnect", href="https://fonts.googleapis.com")
    link(rel="preconnect", href="https://fonts.gstatic.com", crossorigin)
    link(href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap", rel="stylesheet")
    link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200")
    link(rel="stylesheet", href="/css/style.css")

  body
    header.app-header
      a.icon-button(href=`/detalhes/${servico._id}`)
        span.material-symbols-outlined arrow_back
      img.header-logo(src="/assets/logo_barra.png", alt="Logo EMATER")
      div(style="width: 40px;")

    main.container.with-header
      if servico
        form.add-service-form(method="POST", action=`/editar/${servico._id}`)
          .servico-item(data-index="0")
            - const dataFormatada = servico.data.toISOString().split('T')[0]
            .form-group
              label(for="data-0") Data*
              input.form-input(type="date", id="data-0", name="servicos[0][data]", value=dataFormatada, required)
            
            .form-group
              label(for="talhao-0") Talhão*
              select.form-input(id="talhao-0", name="servicos[0][talhao]", required)
                option(value="", disabled) Selecione um talhão
                - const todosTalhoes = ['Talhão 1', 'Talhão 2', 'Talhão 3', 'Talhão 4', 'Sede', 'Cereja', 'Cidreira']
                each talhao in todosTalhoes
                  option(value=talhao, selected=(servico.talhao === talhao))= talhao
            
            .form-group
              label(for="servico-select-box-text-0") Serviço(s)*
              .multiselect-container
                .select-box(onclick="toggleCheckboxes('servico-checkboxes-container-0', event)")
                  span#servico-select-box-text-0.placeholder Selecione o(s) serviço(s)
                  span.material-symbols-outlined arrow_drop_down
                .checkboxes-container(id="servico-checkboxes-container-0")
                  .multiselect-search-wrapper
                    input.multiselect-search(type="text", placeholder="Pesquisar serviço...", onkeyup="filterOptions(this, 'servico-checkboxes-container-0')", onclick="event.stopPropagation()")
                  - const todosServicos = { adubacao: 'Adubação', aplicacao_fungicida: 'Aplicação de Fungicida', aplicacao_herbicida: 'Aplicação de Herbicida', capinar: 'Capinar', desbarra: 'Desbarra', rocada: 'Roçada', plantio: 'Plantio', replantio: 'Replantio', poda: 'Poda', limpeza: 'Limpeza' }
                  each label, value in todosServicos
                    label
                      input(type="checkbox", name="servicos[0][servico_tipo][]", value=value, checked=servico.servico_tipo.includes(value), onchange="updateSelectBoxText('servico-checkboxes-container-0', 'servico-select-box-text-0', 'Selecione o(s) serviço(s)')")
                      | #{label}

            .form-group
              label(for="valor_servico-0") Valor do Serviço-R$*
              input.form-input.stepper-input(type="number", id="valor_servico-0", name="servicos[0][valor_servico]", step="0.01", min="0.00", value=servico.valor_servico, required)

            hr.form-divider

            h3.section-title Produtos
            .repeatable-list#produtos-lista-0
              if servico.produtos && servico.produtos.length > 0
                each produto, index in servico.produtos
                  .repeatable-item
                    .repeatable-item-header
                      h4.repeatable-item-title Produto #{index + 1}
                      button.remove-item-btn(type="button") &times;
                    .form-group
                      label Nome do produto
                      input.form-input(type="text", name=`servicos[0][produtos][${index}][nome]`, value=produto.nome)
                    .form-group
                      label Quantidade
                      input.form-input(type="number", name=`servicos[0][produtos][${index}][qtde]`, value=produto.qtde)
                    
                    
                    .form-group
                      label Unidade
                      select.form-input(name=`servicos[0][produtos][${index}][unidade]`)
                        option(value="", disabled) Selecione
                        - const todasUnidades = ["galão 5 litros", "galão 20 litros", "gramas", "h/tr", "h/roç", "Kg/ha", "Kg/200litros", "kg/canhão", "litros", "Litros calda/talhão", "Litros/200litros", "litros/canhão", "mL/100 litros", "mL/bomba", "ml", "pacote 10 gr", "pacote 1 kg"]
                        each unidade in todasUnidades
                          option(value=unidade, selected=(produto.unidade === unidade))= unidade
                    

                    .form-group
                      label Valor por Produto-R$
                      input.form-input(type="number", name=`servicos[0][produtos][${index}][valor]`, value=produto.valor, step="0.01", required)
            
            button.add-item-btn.add-produto-btn(type="button", data-servico-index="0")
              span.material-symbols-outlined add_circle
              | Adicionar outro produto

            hr.form-divider

            h3.section-title Trabalhadores
            .repeatable-list#trabalhadores-lista-0
              if servico.trabalhadores && servico.trabalhadores.length > 0
                each trabalhador, index in servico.trabalhadores
                  .repeatable-item
                    .repeatable-item-header
                      h4.repeatable-item-title Trabalhador #{index + 1}
                      button.remove-item-btn(type="button") &times;
                    .form-group
                      label Nome do trabalhador
                      input.form-input(type="text", name=`servicos[0][trabalhadores][${index}][nome]`, value=trabalhador.nome)

            button.add-item-btn.add-trabalhador-btn(type="button", data-servico-index="0")
              span.material-symbols-outlined add_circle
              | Adicionar novo trabalhador

          .form-actions
            a.btn.btn-secondary(href=`/detalhes/${servico._id}`) Cancelar
            button.btn.btn-primary(type="submit") Salvar Alterações
      else
        p Serviço não encontrado.

    template#produto-template
      .repeatable-item
        .repeatable-item-header
          h4.repeatable-item-title Produto
          button.remove-item-btn(type="button") &times;
        .form-group
          label Nome do produto
          input.form-input(type="text", name="servicos[0][produtos][__INDEX__][nome]")
        .form-group
          label Quantidade
          input.form-input(type="number", name="servicos[0][produtos][__INDEX__][qtde]")
        .form-group
          label Unidade
          select.form-input(name="servicos[0][produtos][__INDEX__][unidade]")
            option(value="", disabled, selected) Selecione
            - const todasUnidades = ["galão 5 litros", "galão 20 litros", "gramas", "h/tr", "h/roç", "Kg/ha", "Kg/200litros", "kg/canhão", "litros", "Litros calda/talhão", "Litros/200litros", "litros/canhão", "mL/100 litros", "mL/bomba", "ml", "pacote 10 gr", "pacote 1 kg"]
            each unidade in todasUnidades
              option(value=unidade)= unidade
        .form-group
          label Valor por Produto-R$
          input.form-input(type="number", name="servicos[0][produtos][__INDEX__][valor]", step="0.01")

    template#trabalhador-template
      .repeatable-item
        .repeatable-item-header
          h4.repeatable-item-title Trabalhador
          button.remove-item-btn(type="button") &times;
        .form-group
          label Nome do trabalhador
          input.form-input(type="text", name="servicos[0][trabalhadores][__INDEX__][nome]")
          
    script.
      function toggleCheckboxes(containerId, event) { event.stopPropagation(); const checkboxesContainer=document.getElementById(containerId); document.querySelectorAll('.checkboxes-container.show').forEach(openContainer=>{ if (openContainer.id !==containerId) { openContainer.classList.remove('show'); } }); checkboxesContainer.classList.toggle('show'); }
      function updateSelectBoxText(containerId, textId, placeholderText) { const selectedCheckboxes=document.querySelectorAll(`#${containerId} input[type="checkbox"]:checked`); const selectBoxText=document.getElementById(textId); if (selectedCheckboxes.length===0) { selectBoxText.textContent=placeholderText; selectBoxText.classList.remove('placeholder-filled'); } else { const selectedValues=Array.from(selectedCheckboxes).map(cb=>cb.parentElement.textContent.trim()); selectBoxText.textContent=selectedValues.join(' + '); selectBoxText.classList.add('placeholder-filled'); } }
      function filterOptions(inputElement, containerId) { const filterText=inputElement.value.toLowerCase(); const container=document.getElementById(containerId); const labels=container.getElementsByTagName('label'); for (let i=0; i < labels.length; i++) { const labelText=labels[i].textContent.toLowerCase(); labels[i].style.display=labelText.includes(filterText) ? "" : "none"; } }
      window.addEventListener('click', function(e) { if (!e.target.closest('.multiselect-container')) { document.querySelectorAll('.checkboxes-container.show').forEach(c=>c.classList.remove('show')); } });
      document.addEventListener('DOMContentLoaded', ()=>{ updateSelectBoxText('servico-checkboxes-container-0', 'servico-select-box-text-0', 'Selecione o(s) serviço(s)'); function updateFieldNames(container) { const servicoIndex=container.closest('.servico-item').dataset.index || 0; const items=container.querySelectorAll('.repeatable-item'); const type=container.id.includes('produtos') ? 'produtos' : 'trabalhadores'; items.forEach((item, itemIndex)=>{ item.querySelector('.repeatable-item-title').textContent=`${type==='produtos' ? 'Produto' : 'Trabalhador'} ${itemIndex + 1}`; item.querySelectorAll('input, select').forEach(input=>{ const baseName=input.getAttribute('name').match(/\[(\w+)\]$/)[1]; input.setAttribute('name', `servicos[${servicoIndex}][${type}][${itemIndex}][${baseName}]`); }); }); }
      function addItem(listId, templateId) { const list=document.getElementById(listId); const template=document.getElementById(templateId); const clone=template.content.cloneNode(true); list.appendChild(clone); updateFieldNames(list); }
      document.querySelector('main').addEventListener('click', e=>{ if (e.target.matches('.add-produto-btn')) { const servicoIndex=e.target.dataset.servicoIndex; addItem(`produtos-lista-${servicoIndex}`, 'produto-template'); }
      if (e.target.matches('.add-trabalhador-btn')) { const servicoIndex=e.target.dataset.servicoIndex; addItem(`trabalhadores-lista-${servicoIndex}`, 'trabalhador-template'); }
      if (e.target.matches('.remove-item-btn')) { const item=e.target.closest('.repeatable-item'); const list=item.parentElement; item.remove(); updateFieldNames(list); } }); });